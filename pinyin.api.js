// Generated by CoffeeScript 1.9.2
(function() {
  var PinYinApi;

  window.PinYinApi = PinYinApi = {
    StaticDataWord: ['其它劳务费', '出差补贴', '加班费', '助教费用', '助管费用', '博士培养费', '口译费', '命题费', '咨询费', '外教补贴', '奖学金', '媒体费', '实习津贴', '指导费', '撰写费', '教学奖励费', '演讲费', '监考费', '督导费', '笔译费', '答辩费', '论坛主持费', '评审费', '课酬', '辅导费', '速记费', '阅卷费', '面试费'],
    StaticDataPinyin: 'qí tā láo wù fèi ,chū chāi bǔ tiē ,jiā bān fèi ,zhù jiào fèi yòng ,zhù guǎn fèi yòng ,bó shì péi yǎng fèi ,kǒu yì fèi ,mìng tí fèi ,zī xún fèi ,wài jiào bǔ tiē , jiǎng xué jīn ,méi tǐ fèi ,shí xí jīn tiē ,zhǐ dǎo fèi ,zhuàn xiě fèi ,jiào xué jiǎng lì fèi ,yǎn jiǎng fèi ,jiān kǎo fèi ,dū dǎo fèi ,bǐ yì fèi ,dá biàn fèi ,lùn tán zhǔ chí fèi , píng shěn fèi ,kè chóu ,fǔ dǎo fèi ,sù jì fèi ,yuè juàn fèi ,miàn shì fèi',
    Initials: "zh,ch,sh,b,p,m,f,d,t,n,l,g,k,h,j,q,x,r,z,c,s,yu,y,w".split(","),
    Finals: "ang,eng,ing,ong,an,en,in,un,er,ai,ei,ui,ao,ou,iu,ie,ve,a,o,e,i,u,v".split(","),
    PinyinStyle: {
      Normal: 0,
      Tone: 1,
      Tones: 2,
      Initials: 3,
      FirstLetter: 4
    },
    PhoneticSymbol: {
      "ā": "a1",
      "á": "a2",
      "ǎ": "a3",
      "à": "a4",
      "ē": "e1",
      "é": "e2",
      "ě": "e3",
      "è": "e4",
      "ō": "o1",
      "ó": "o2",
      "ǒ": "o3",
      "ò": "o4",
      "ī": "i1",
      "í": "i2",
      "ǐ": "i3",
      "ì": "i4",
      "ū": "u1",
      "ú": "u2",
      "ǔ": "u3",
      "ù": "u4",
      "ü": "v0",
      "ǘ": "v2",
      "ǚ": "v3",
      "ǜ": "v4",
      "ń": "n2",
      "ň": "n3",
      "": "m2"
    },
    RegPhoneticSymbol: new RegExp('(["āáǎàēéěèōóǒòīíǐìūúǔùüǘǚǜńň"])', 'g'),
    RegTones: /([aeoiuvnm])([0-4])$/,
    String2PinYinApiUrl: 'http://string2pinyin.sinaapp.com/?str=',
    getRemoteData: function(arr) {
      jQuery.get(this.String2PinYinApiUrl + arr.join(','), function(data) {
        var json, ref;
        json = JSON.parse(data != null ? (ref = data.responseText) != null ? ref.replace('<html><head/><body>', '').replace('</body></html>', '') : void 0 : void 0);
        if ((json != null ? json.status : void 0) === 'T' && ((json != null ? json.pinyin : void 0) != null)) {
          return json.pinyin;
        } else {
          return '';
        }
      });
      return '';
    },
    format: function(pinyin, style) {
      var firstLetter, initial, j, len, ref, tone;
      if (style == null) {
        style = this.PinyinStyle.Initials;
      }
      switch (style) {
        case this.PinyinStyle.Initials:
          ref = this.Initials;
          for (j = 0, len = ref.length; j < len; j++) {
            initial = ref[j];
            if (pinyin.indexOf(initial) === 0) {
              return initial;
            }
          }
          return '';
        case this.PinyinStyle.Tone:
          firstLetter = pinyin.charAt(0);
          if (this.PhoneticSymbol.hasOwnProperty(firstLetter)) {
            return this.PhoneticSymbol[firstLetter].charAt(0);
          } else {
            return firstLetter;
          }
          break;
        case this.PinyinStyle.Normal:
          return pinyin.replace(this.RegPhoneticSymbol, (function(_this) {
            return function($0, $1) {
              return _this.PhoneticSymbol[$1].replace(_this.RegTones, "$1");
            };
          })(this));
        case this.PinyinStyle.Tones:
          tone = '';
          pinyin = pinyin.replace(this.RegPhoneticSymbol, (function(_this) {
            return function($0, $1) {
              tone = _this.PhoneticSymbol[$1].replace(_this.RegTones, "$2");
              return _this.PhoneticSymbol[$1].replace(_this.RegTones, "$1");
            };
          })(this));
          return pinyin + tone;
        case this.PinyinStyle.Tone:
          return pinyin;
        default:
          return pinyin;
      }
    },
    pinyin2Array: function(str, want, splitor, inPhaseSplitor) {
      var i, j, k, l, len, len1, len2, py, pys, ref, ref1, res, results, rst, that, ts;
      if (str == null) {
        str = this.StaticDataPinyin;
      }
      if (want == null) {
        want = this.PinyinStyle.Normal;
      }
      if (splitor == null) {
        splitor = ',';
      }
      if (inPhaseSplitor == null) {
        inPhaseSplitor = '';
      }
      that = this;
      res = [];
      if (!str || str.length === 0) {
        return res;
      }
      ref = str.split(splitor);
      for (j = 0, len = ref.length; j < len; j++) {
        pys = ref[j];
        rst = '';
        ref1 = pys.split(' ');
        for (k = 0, len1 = ref1.length; k < len1; k++) {
          py = ref1[k];
          rst += that.format(py, want) + inPhaseSplitor;
        }
        res.push(rst);
      }
      results = [];
      for (i = l = 0, len2 = res.length; l < len2; i = ++l) {
        ts = res[i];
        results.push({
          value: this.StaticDataWord[i],
          ini: ts
        });
      }
      return results;
    },
    substringMatcher: function(strs) {
      return function(q, cb) {
        var matches, substrRegex;
        matches = [];
        if (q === '*' || q === '?') {
          q = '.*';
        }
        if (q !== '.*') {
          q = q.split('').join('.*');
        }
        substrRegex = new RegExp(q, 'i');
        $.each(strs, function(i, str) {
          if (substrRegex.test(str.value) || substrRegex.test(str.ini)) {
            matches.push({
              value: str.value
            });
          }
        });
        cb(matches);
      };
    },
    getPinyinSource: function() {
      return this.substringMatcher(this.pinyin2Array());
    }
  };

}).call(this);
